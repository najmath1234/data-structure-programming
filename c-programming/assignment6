ASSIGNMENT - 6

	PROGRAM :- 1. Write a C program to implement Set data structure using Bit Vector representation and perform operations such Union, Intersection, Set Complement and Set Difference.
			   2. Write a C program to implement Disjoint data structure using an array and perform operations such as MakeSet, FindSet and Union (using union-rank algorithm)	

PROGRAM - 1

#include <stdio.h>
#include <ctype.h>

void bitVector(char set[], int bit_vector[], char U[])
{
    for (int i = 0; i < 26; i++)
    {
        bit_vector[i] = 0;
    }
    for (int i = 0; set[i] != '\0'; i++)
    {
        for (int j = 0; j < 26; j++)
        {
            if (set[i] == U[j])
            {
                bit_vector[j] = 1;
                break;
            }
        }
    }
}

void printBitVector(int bit_vector[])
{
    for (int i = 0; i < 26; i++)
    {
        printf("%d", bit_vector[i]);
    }
    printf("\n");
}

void union_operation(int set1_bit[], int set2_bit[], int result[])
{
    for (int i = 0; i < 26; i++)
        result[i] = set1_bit[i] | set2_bit[i];
}

void intersection(int set1_bit[], int set2_bit[], int result[])
{
    for (int i = 0; i < 26; i++)
    {
        result[i] = set1_bit[i] & set2_bit[i];
    }
}

void complementOperation(int set_bit[], int result[])
{
    for (int i = 0; i < 26; i++)
    {
        result[i] = (set_bit[i] == 0) ? 1 : 0;
    }
}

void differenceS1_S2(int set1_bit[], int set2_bit[], int result[])
{
    int complement[26];
    complementOperation(set2_bit, complement);
    for (int i = 0; i < 26; i++)
        result[i] = set1_bit[i] & set2_bit[i];
}

void differenceS2_S1(int set1_bit[], int set2_bit[], int result[])
{
    int complement[26];
    complementOperation(set1_bit, complement);
    for (int i = 0; i < 26; i++)
        result[i] = set2_bit[i] & set1_bit[i];
}
int main()
{
    char Universal_set[26]= {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};
    char set1[26], set2[26];
    int set1_bit[26], set2_bit[26], result[26];
    int set1_size, set2_size;

    printf("Enter size of Set 1: ");
    scanf("%d", &set1_size);
    printf("\nEnter elements for Set 1: ");
    for (int i = 0; i < set1_size; i++)
    {
        scanf(" %c", &set1[i]);
        set1[i] = tolower(set1[i]);
    }
    set1[set1_size] = '\0';

    printf("\nEnter size of Set 2: ");
    scanf("%d", &set2_size);
    printf("\nEnter elements for Set 2: ");
    for (int i = 0; i < set2_size; i++)
    {
        scanf(" %c", &set2[i]);
        set2[i] = tolower(set2[i]);
    }
    set2[set2_size] = '\0';

    bitVector(set1, set1_bit, Universal_set);
    printf("\nBit Vector Representation of Set 1: \n");
    printBitVector(set1_bit);

    bitVector(set2, set2_bit, Universal_set);
    printf("\nBit Vector Representation of Set 2: \n");
    printBitVector(set2_bit);

    int choice;
    while (choice != 5)
    {
        printf("\n 1.Set Union\n 2.Intersection\n 3.Complement\n 4.Set Difference S1-S2 \n 5.Set Difference S2-S1\n 6.Exit\n");
        printf("Enter Your Choice Here: ");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            union_operation(set1_bit, set2_bit, result);
            printf("\nUnion of Set 1 and Set 2 is :\n");
            printBitVector(result);
            break;
        case 2:
            intersection(set1_bit, set2_bit, result);
            printf("\nIntersection of Set 1 and Set 2 is :\n");
            printBitVector(result);
            break;
        case 3:
            complementOperation(set1_bit, result);
            printf("\nComplement of Set 1 is :\n");
            printBitVector(result);
            complementOperation(set2_bit, result);
            printf("\nComplement of Set 2 is :\n");
            printBitVector(result);
            break;
        case 4:
            differenceS1_S2(set1_bit, set2_bit, result);
            printf("\nSet Difference of Set 1 and Set 2 is :\n");
            printBitVector(result);
            break;
        case 5:
            differenceS2_S1(set1_bit, set2_bit, result);
            printf("\nSet Difference of Set 2 and Set 1 is :\n");
            printBitVector(result);
            break;
        case 6:
            return 0;
        default:
            printf("\nInvalid Choice, Try Again\n");
        }
    }

    return 0;
}

________________________________________________________________________________

PROGRAM - 2

#include <stdio.h>
#include <stdlib.h>

struct node {
    struct node *rep;
    struct node *next;
    int data;
    int rank; // Adding rank field
};

struct node *heads[50], *tails[50];
int countRoot = 0;

void makeSet(int x) {
    struct node *new = (struct node *)malloc(sizeof(struct node));
    new->rep = new;
    new->next = NULL;
    new->data = x;
    new->rank = 0; // Initialize rank to 0
    heads[countRoot] = new;
    tails[countRoot++] = new;
}

struct node *find(int a) {
    int i;
    for (i = 0; i < countRoot; i++) {
        struct node *tmp = heads[i];
        while (tmp != NULL) {
            if (tmp->data == a) {
                return tmp->rep;
            }
            tmp = tmp->next;
        }
    }
    return NULL;
}

void unionSets(int a, int b) {
    struct node *rep1 = find(a);
    struct node *rep2 = find(b);

    if (rep1 == NULL || rep2 == NULL) {
        printf("\nElement not present in the DS\n");
        return;
    }

    if (rep1 != rep2) {
        if (rep1->rank < rep2->rank) {
            rep1->rep = rep2;
        } else if (rep1->rank > rep2->rank) {
            rep2->rep = rep1;
        } else {
            rep2->rep = rep1;
            rep1->rank++;
        }

        // Merging the sets
        struct node *tmp = rep2;
        while (tmp->next != NULL) {
            tmp = tmp->next;
        }
        tmp->next = rep1;
    }
}

int search(int x) {
    int i;
    for (i = 0; i < countRoot; i++) {
        struct node *tmp = heads[i];
        if (tmp->data == x) {
            return 1;
        }
        while (tmp != NULL) {
            if (tmp->data == x) {
                return 1;
            }
            tmp = tmp->next;
        }
    }
    return 0;
}

int main() {
    int choice, x, y;
    do {
        printf("\n.......MENU.......\n\n1.Make Set\n2.Display set representatives\n3.Union\n4.Find Set\n5.Exit\n");
        printf("Enter your choice : ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("\nEnter new element : ");
                scanf("%d", &x);
                if (search(x) == 1) {
                    printf("\nElement already present in the disjoint set DS\n");
                } else {
                    makeSet(x);
                }
                break;
            case 2:
                printf("\n");
                for (int i = 0; i < countRoot; i++) {
                    printf("%d ", heads[i]->data);
                }
                printf("\n");
                break;
            case 3:
                printf("\nEnter first element : ");
                scanf("%d", &x);
                printf("\nEnter second element : ");
                scanf("%d", &y);
                unionSets(x, y);
                break;
            case 4:
                printf("\nEnter the element: ");
                scanf("%d", &x);
                struct node *rep = find(x);
                if (rep == NULL) {
                    printf("\nElement not present in the DS\n");
                } else {
                    printf("\nThe representative of %d is %d\n", x, rep->data);
                }
                break;
            case 5:
                exit(0);
            default:
                printf("\nWrong choice\n");
                break;
        }
    } while (1);

    return 0;
}

________________________________________________________________________________


