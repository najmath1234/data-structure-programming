PROGRAM1:C program to find the sum of 'n' numbers.
ROLL NO:22
NAME:JALALA P V

#include<stdio.h>
int main()
{       
	int sum=0,n;
	int a[10];
	printf("enter the no of elements");
	scanf("%d",&n);
	printf("enter the array elements");
	for(int i=0;i<n;i++)
	{	
		scanf("%d",&a[i]);
		
	}
	for(int i=0;i<n;i++)
	{	
		sum=sum+a[i];
		
	}
	printf("sum of the array elements are");
	printf("%d",sum);
	return (0);
		
}
PROGRAM2:C program to merge two sorted arrays.
ROLL NO:22
NAME:JALALA P V

#include<stdio.h>
int a[10], b[10], d[20];
int m, n;
int i, j;
void sort(int c[], int size) {
	int temp;
	for(i = 0; i < size - 1; i++) {
        	for(j = i + 1; j < size; j++) {
			if(c[i] > c[j]) 
			    {
			       	temp = c[i];
				c[i] = c[j];
				c[j] = temp;
			    }
		}
    	}
}
 
void merge(int a[],int b[],int size1,int size2)
{
    for(i = 0; i < size1; i++) {
    	d[i] = a[i];
    }
    for(i = 0; i < size2; i++) {
        d[m + i] = b[i];
    }
}
void display(int c[], int size) {
    for(i = 0; i < size; i++) {
        printf("%d\t", c[i]);
    }
}

int main() {

	printf("Enter the number of elements of array 1:\n");
	scanf("%d", &m);
	printf("Enter the elements of array 1:\n");
	for(i = 0; i < m; i++) {
		scanf("%d", &a[i]);
	}
	printf("Enter the number of elements of array 2:\n");
	scanf("%d", &n);
	printf("Enter the elements of array 2:\n");
	for(i = 0; i < n; i++) {
		scanf("%d", &b[i]);
	}
	printf("the entered unsorted array1\t");
	display(a,m);
	printf("\nthe entered unsorted array2\t");
	display(b,n);
	sort(a, m);
	sort(b, n);
	printf("\nSorted array 1:\n");
	display(a, m);
	printf("\nSorted array 2:\n");
	display(b, n);
	int merged_size = m + n;
	printf("\nthe merged array");
	merge(a,b,m,n);
	display(d, merged_size);
	sort(d, merged_size);
	printf("\nMerged and sorted array:\n");
	display(d, merged_size);
	return 0;
    }

 

 

PROGRAM3:C program to create a STACK using array data structure and implement the operations PUSH, POP and TRAVESE.
ROLL NO:22
NAME:JALALA P V


#include<stdio.h>
#define max 5
int stack[max];
int top=-1;
void push();
void pop();
void traversal();
int main()
{       
	int choice;
	printf("1.push\n2.pop\n3.traversal\n4.exit\n");
	do
	{
		printf("enter your choice");
		scanf("%d",&choice);
		switch(choice)
		{
			case 1:push();
			break;
			case 2:pop();
			break;
			case 3:traversal();
			break;
			case 4:printf("program exited\n");
			break;
			default:printf("wrong choice\n");
			break;

		}


	}while(choice !=4);
}

void push()
{    
int element;
if(top==max-1)
{
	printf("stack overflow");
}
else
{    
	printf("enter the element");
	scanf("%d",&element);
	top++;
	stack[top]=element;

}

}
void pop()
{
	int element;
	if(top==-1)
	{
		printf("STACK EMPTY");
	}
	else
	{
		element=stack[top];
		top--;
		printf("element deleted is %d",element);
	}
}
void traversal()
{    
	int i;
	for(i=0;i<=top;i++)
	{
		printf("%d",stack[i]);
	}
}

PROGRAM4:C program to create a QUEUE using array data structure and implement the operations ENQUEUE, DEQUEUE and TRAVERSE.
ROLL NO:22
NAME:JALALA P V


#include <stdio.h>
#include <stdlib.h>
#define SIZE 5 
int queue[SIZE];
int front = -1; 
int rear = -1; 
int isFull() {
	return rear == SIZE - 1;
}
int isEmpty() {
	return front == -1 || front > rear;

}

void enqueue(int value) {
	if (isFull()) {
		printf("Queue is full.\n");

	} else 

	{

		if (front == -1) 
		front = 0;
		rear++;
		queue[rear] = value;
		printf("Enqueued %d.\n", value);

	}

}

 

int dequeue() {
	int value;
	if (isEmpty()) {
		printf("Queue is empty.\n");

	} else {
		value = queue[front];
		front++; 
		printf("Dequeued %d.\n", value);
		return value;
	}
}

 

 

void display() {
	if (isEmpty()) {
		printf("Queue is empty.\n");
	} else 
	{
		printf("Queue elements are: ");
		for (int i = front; i <= rear; i++) {
		printf("%d ", queue[i]);
	}
	printf("\n");
	}

}

int main() {
int choice, value;
while (1) {
	printf("\n--- Linear Queue Menu ---\n");
	printf("1. Enqueue\n");
	printf("2. Dequeue\n");
	printf("3. Display\n");
	printf("4. Exit\n");
	printf("Enter your choice: ");
	scanf("%d", &choice);
	switch (choice)
	{
		case 1:
		printf("Enter the value to enqueue: ");
		scanf("%d", &value);
		enqueue(value);
		break;
		case 2:
		dequeue();
		break;
		case 3:
		display();
		break;
		case 4:
		printf("Exiting program.\n");
		exit(0);
		default:
		printf("Invalid choice! Please select a valid option.\n");
	}
}
return 0;
}

